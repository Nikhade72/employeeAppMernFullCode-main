{"ast":null,"code":"const validate = values => {\n  const errors = {};\n  const regexEmail = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const regexPassword = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}$/;\n  const validEmails = ['admin', 'user'];\n  const validPasswords = ['admin', 'user'];\n\n  // EMAIL VALIDATION\n\n  if (!values.email) {\n    errors.email = 'Email is required!';\n  } else if (validEmails.includes(values.email)) {\n    errors.email = undefined;\n  } else if (!regexEmail.test(values.email)) {\n    errors.email = 'Enter a valid email';\n  } else if (values.email.includes(\" \")) {\n    errors.email = 'No spaces allowed!';\n  }\n\n  // PASSWORD VALIDATION\n\n  if (!values.password) {\n    errors.password = 'Password is required!';\n  } else if (validPasswords.includes(values.password)) {\n    errors.password = undefined;\n  } else if (values.password.includes(\" \")) {\n    errors.password = 'No spaces allowed!';\n  } else if (values.password.length < 8) {\n    errors.password = 'Password must contain minimum 8 characters!';\n  } else if (!regexPassword.test(values.password)) {\n    errors.password = 'Weak password';\n  }\n  return errors;\n};\nexport default validate;","map":{"version":3,"names":["validate","values","errors","regexEmail","regexPassword","validEmails","validPasswords","email","includes","undefined","test","password","length"],"sources":["C:/Users/vishn/Desktop/employeeAppMernFullCode-main/frontend/src/components/utils/Login&Signup/formValLogin.js"],"sourcesContent":["\nconst validate = (values) => {\n\n    const errors = {};\n    const regexEmail = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n    const regexPassword = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}$/\n    const validEmails = ['admin', 'user'];\n    const validPasswords = ['admin', 'user'];\n\n\n\n    // EMAIL VALIDATION\n\n    if (!values.email) {\n      errors.email = 'Email is required!';\n    }else if (validEmails.includes(values.email)) {\n      errors.email = undefined;\n      }\n     else if (!regexEmail.test(values.email)) {\n      errors.email = 'Enter a valid email';\n    }else if (values.email.includes(\" \")) {\n      errors.email = 'No spaces allowed!';\n    }\n\n    // PASSWORD VALIDATION\n\n    if (!values.password) {\n      errors.password = 'Password is required!';\n    }else if (validPasswords.includes(values.password)) {\n      errors.password = undefined;\n    }else if (values.password.includes(\" \")) {\n      errors.password = 'No spaces allowed!';\n\n    }else if (values.password.length < 8) {\n      errors.password = 'Password must contain minimum 8 characters!';\n\n    }else if (!regexPassword.test(values.password)) {\n      errors.password = 'Weak password';\n\n    }\n  return errors}\n  \n  export default validate;\n  "],"mappings":"AACA,MAAMA,QAAQ,GAAIC,MAAM,IAAK;EAEzB,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,UAAU,GAAG,6CAA6C;EAChE,MAAMC,aAAa,GAAG,uCAAuC;EAC7D,MAAMC,WAAW,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;EACrC,MAAMC,cAAc,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;;EAIxC;;EAEA,IAAI,CAACL,MAAM,CAACM,KAAK,EAAE;IACjBL,MAAM,CAACK,KAAK,GAAG,oBAAoB;EACrC,CAAC,MAAK,IAAIF,WAAW,CAACG,QAAQ,CAACP,MAAM,CAACM,KAAK,CAAC,EAAE;IAC5CL,MAAM,CAACK,KAAK,GAAGE,SAAS;EACxB,CAAC,MACG,IAAI,CAACN,UAAU,CAACO,IAAI,CAACT,MAAM,CAACM,KAAK,CAAC,EAAE;IACxCL,MAAM,CAACK,KAAK,GAAG,qBAAqB;EACtC,CAAC,MAAK,IAAIN,MAAM,CAACM,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpCN,MAAM,CAACK,KAAK,GAAG,oBAAoB;EACrC;;EAEA;;EAEA,IAAI,CAACN,MAAM,CAACU,QAAQ,EAAE;IACpBT,MAAM,CAACS,QAAQ,GAAG,uBAAuB;EAC3C,CAAC,MAAK,IAAIL,cAAc,CAACE,QAAQ,CAACP,MAAM,CAACU,QAAQ,CAAC,EAAE;IAClDT,MAAM,CAACS,QAAQ,GAAGF,SAAS;EAC7B,CAAC,MAAK,IAAIR,MAAM,CAACU,QAAQ,CAACH,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvCN,MAAM,CAACS,QAAQ,GAAG,oBAAoB;EAExC,CAAC,MAAK,IAAIV,MAAM,CAACU,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACpCV,MAAM,CAACS,QAAQ,GAAG,6CAA6C;EAEjE,CAAC,MAAK,IAAI,CAACP,aAAa,CAACM,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,EAAE;IAC9CT,MAAM,CAACS,QAAQ,GAAG,eAAe;EAEnC;EACF,OAAOT,MAAM;AAAA,CAAC;AAEd,eAAeF,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}